package mathz

import (
	"math"

	"github.com/go2pkg/constraints"
)

type NumericAbs[T any] interface {
	constraints.Numeric
	Abs() T
}

// func Abs[T NumericAbs](n T) T {
// 	return n.Abs()
// }

// OrderedAbs is a helper type that defines an Abs method for ordered numeric
// types.
type OrderedAbs[T constraints.OrderedNumeric] T

func (a OrderedAbs[T]) Abs() OrderedAbs[T] {
	if a < 0 {
		return -a
	}
	return a
}

// ComplexAbs is a helper type that defines an Abs method for complex types.
type ComplexAbs[T constraints.Complex] T

func (a ComplexAbs[T]) Abs() ComplexAbs[T] {
	d := math.Hypot(float64(real(a)), float64(imag(a)))
	return ComplexAbs[T](complex(d, 0))
}
